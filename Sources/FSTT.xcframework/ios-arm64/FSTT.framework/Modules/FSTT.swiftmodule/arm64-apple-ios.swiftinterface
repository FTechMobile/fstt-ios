// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target arm64-apple-ios14.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name FSTT
import AVFAudio
import AVFoundation
@_exported import FSTT
import Foundation
import MobileCoreServices
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os
@objc @_hasMissingDesignatedInitializers @objcMembers public class FTError : Foundation.NSError {
  @objc public init(code: Swift.Int, message: Swift.String)
  @objc deinit
}
@objc @objcMembers public class STTResponse : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let audioUrl: Swift.String?
  @objc final public let transformData: FSTT.TransformData?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class TransformData : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let transcript: Swift.String?
  @objc final public let words: [FSTT.Word]?
  final public let time: Swift.Double?
  @objc final public let transcriptNoLM: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @objcMembers public class Word : ObjectiveC.NSObject, Swift.Codable {
  final public let startTime: Swift.Double?, endTime: Swift.Double?
  @objc final public let word: Swift.String?
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
  required public init(from decoder: any Swift.Decoder) throws
}
@objc @_inheritsConvenienceInitializers @objcMembers final public class FTechSSTManager : ObjectiveC.NSObject {
  @objc public static func instance() -> FSTT.FTechSSTManager
  @objc weak final public var delegate: (any FSTT.FTechSSTManagerDelegate)?
  @objc final public func initSDK(appId: Swift.String, key: Swift.String)
  @objc final public func startRecording()
  @objc final public func stopRecoding()
  @objc final public func startSTT(with file: Foundation.URL)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol FTechSSTManagerDelegate {
  @objc optional func initRecord(success: Swift.Bool)
  @objc optional func onStart()
  @objc optional func onRecording()
  @objc optional func onFailure(error: FSTT.FTError)
  @objc optional func onCompletionRecord(data: FSTT.STTResponse)
}
public enum FTHTTPStatusCode : Swift.Int, Swift.Error {
  case `continue`
  case switchingProtocols
  case processing
  case ok
  case created
  case accepted
  case nonAuthoritativeInformation
  case noContent
  case resetContent
  case partialContent
  case multiStatus
  case alreadyReported
  case IMUsed
  case multipleChoices
  case movedPermanently
  case found
  case seeOther
  case notModified
  case useProxy
  case switchProxy
  case temporaryRedirect
  case permenantRedirect
  case badRequest
  case unauthorized
  case paymentRequired
  case forbidden
  case notFound
  case methodNotAllowed
  case notAcceptable
  case proxyAuthenticationRequired
  case requestTimeout
  case conflict
  case gone
  case lengthRequired
  case preconditionFailed
  case payloadTooLarge
  case URITooLong
  case unsupportedMediaType
  case rangeNotSatisfiable
  case expectationFailed
  case teapot
  case misdirectedRequest
  case unprocessableEntity
  case locked
  case failedDependency
  case upgradeRequired
  case preconditionRequired
  case tooManyRequests
  case requestHeaderFieldsTooLarge
  case noResponse
  case unavailableForLegalReasons
  case SSLCertificateError
  case SSLCertificateRequired
  case HTTPRequestSentToHTTPSPort
  case clientClosedRequest
  case internalServerError
  case notImplemented
  case badGateway
  case serviceUnavailable
  case gatewayTimeout
  case HTTPVersionNotSupported
  case variantAlsoNegotiates
  case insufficientStorage
  case loopDetected
  case notExtended
  case networkAuthenticationRequired
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
extension FSTT.FTHTTPStatusCode : Swift.Equatable {}
extension FSTT.FTHTTPStatusCode : Swift.Hashable {}
extension FSTT.FTHTTPStatusCode : Swift.RawRepresentable {}
